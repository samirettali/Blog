<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on SE</title>
    <link>https://samirettali.com/tags/ctf/</link>
    <description>Recent content in CTF on SE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Jul 2019 21:50:37 +0200</lastBuildDate>
    
        <atom:link href="https://samirettali.com/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bitkoff Bank - Cybrics Quals 2019</title>
      <link>https://samirettali.com/posts/cybrics-2019/bitkoff-bank/</link>
      <pubDate>Sun, 21 Jul 2019 21:50:37 +0200</pubDate>
      
      <guid>https://samirettali.com/posts/cybrics-2019/bitkoff-bank/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/bitkoff-bank/task.png&#34; alt=&#34;Description&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This challenge is a web based challenge, here is the registration/login page:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/bitkoff-bank/web.png&#34; alt=&#34;Web&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the registration we are provided with a simple web interface for mining
coins:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/bitkoff-bank/ui.png&#34; alt=&#34;UI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We immediately see that we need 1 USD to buy the flag, we can mine 0.0000000001
BTCs with a click and we can convert BTC into USD and viceversa.&lt;/p&gt;

&lt;p&gt;The thing that immediately came to my mind is to use &lt;code&gt;curl&lt;/code&gt; to automate the
BTC mining, so this is the command I used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;..10000000&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt;
curl -i -s -k  -X &lt;span style=&#34;color:#ba2121&#34;&gt;$&amp;#39;POST&amp;#39;&lt;/span&gt; -H &lt;span style=&#34;color:#ba2121&#34;&gt;$&amp;#39;Cookie: name=samir; password=ciao&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -b &lt;span style=&#34;color:#ba2121&#34;&gt;$&amp;#39;name=samir; password=samir&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --data-binary &lt;span style=&#34;color:#ba2121&#34;&gt;$&amp;#39;mine=1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;$&amp;#39;http://95.179.148.72:8083/index.php&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &amp;amp;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve done the request appending &lt;code&gt;&amp;amp;&lt;/code&gt; to the command so that it forks in the
backround, making the mining process much faster. I know it could have been done
better, probably with python and async requests, but there were 12+ hours.&lt;/p&gt;

&lt;p&gt;After less than one hour the amount of BTCs allowed us to buy the flag.&lt;/p&gt;

&lt;h3 id=&#34;flag&#34;&gt;Flag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;flag: cybrics{50_57R4n93_pR3c1510n}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: buying the auto-miner was not a good idea because you could have bought as
many as you want but they were doing only one click a second. And even then, the
page would refresh every second, making the page containing the flag disappear.
Luckily, I had burp intercepting the traffic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sender - Cybrics Quals 2019</title>
      <link>https://samirettali.com/posts/cybrics-2019/sender/</link>
      <pubDate>Sun, 21 Jul 2019 19:48:34 +0200</pubDate>
      
      <guid>https://samirettali.com/posts/cybrics-2019/sender/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/task.png&#34; alt=&#34;Task&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For this challenge, we have a link with some intercepted data:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/data.png&#34; alt=&#34;Data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the traffic incerception of a mail sent from &lt;code&gt;fawkes@ugm.cybrics.net&lt;/code&gt;. The
body of the mail is encoded with the quoted-printable encoding. Let&amp;rsquo;s save it in
a file and decode it:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/mail-body.png&#34; alt=&#34;Mail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So we do have the password for an archive. After a bit of thinkering I thought
to search if there are received mails. The default port for &lt;code&gt;POP3&lt;/code&gt; is 110, so
let&amp;rsquo;s try:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/pop3.png&#34; alt=&#34;POP3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s read the mail with &lt;code&gt;RETR 1:&lt;/code&gt;
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/received-mail.png&#34; alt=&#34;Received mail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The mail contains an attachment called &lt;code&gt;secret_flag.zip&lt;/code&gt;. Let&amp;rsquo;s use &lt;code&gt;tee&lt;/code&gt; to
write the output of netcat to a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;nc ugm.cybrics.net 110 | tee received-mail&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run the previous commands to authenticate and retrieve the mail.&lt;/p&gt;

&lt;p&gt;We now have to use an editor to extract the base64 encoded attachment, so delete
the lines from 1 to 34 and from 1899 to 1901. We also have to remove the line
endings to obtain a valid base64 string.&lt;/p&gt;

&lt;p&gt;I personally use vim and the command to remove all line endings is &lt;code&gt;:%s/\n//g&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create the archive and extract it:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/archive.png&#34; alt=&#34;Archive&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even if &lt;code&gt;base64 -d&lt;/code&gt; says that the input is not valid, it&amp;rsquo;s because &lt;code&gt;cat&lt;/code&gt; adds a
new line at the end.&lt;/p&gt;

&lt;p&gt;Opening the PDF file we find the flag:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/sender/pdf.png&#34; alt=&#34;PDF&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;flag&#34;&gt;Flag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;cybrics{Y0uV3_G0T_m41L}&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ProCTF - Cybrics Quals 2019</title>
      <link>https://samirettali.com/posts/cybrics-2019/pro/</link>
      <pubDate>Sun, 21 Jul 2019 12:12:55 +0200</pubDate>
      
      <guid>https://samirettali.com/posts/cybrics-2019/pro/</guid>
      <description>

&lt;p&gt;For this challenge, we are provided with the username and the password for a machine.
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/proctf/pro-task.png&#34; alt=&#34;Information&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The ssh session gives us a strange shell:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/proctf/shell.png&#34; alt=&#34;Shell&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By trying some commands we run into an error message:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/proctf/prolog.png&#34; alt=&#34;Prolog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Searching the error message on Google tells us that it&amp;rsquo;s probably Prolog.
The &lt;a href=&#34;https://www.swi-prolog.org/pldoc/man?predicate=shell/2&#34;&gt;prolog&amp;rsquo;s documentation&lt;/a&gt; tells us that the syntax to run a system command is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;shell(&amp;#39;command&amp;#39;).&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s try:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/proctf/command.png&#34; alt=&#34;Command&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Searching through the directories we find the flag file in the user&amp;rsquo;s home:
&lt;img src=&#34;https://samirettali.com/images/cybrics-2019/proctf/flag.png&#34; alt=&#34;Flag&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After I solved the challenge, reading the documentation, I found out that
running the &lt;code&gt;shell&lt;/code&gt; command without parameters would have gave me the default
system shell, making it easier to move through the system.&lt;/p&gt;

&lt;h3 id=&#34;flag&#34;&gt;Flag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;cybrics{feeling_like_a_PRO?_that_sounds_LOGical_to_me!____g3t_it?_G37_1T?!?!_ok_N3v3Rm1nd...}&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>