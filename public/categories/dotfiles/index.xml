<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotfiles on SE</title>
    <link>https://samirettali.com/categories/dotfiles/</link>
    <description>Recent content in dotfiles on SE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jul 2019 19:07:40 +0000</lastBuildDate>
    
        <atom:link href="https://samirettali.com/categories/dotfiles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dotfiles</title>
      <link>https://samirettali.com/posts/2019-07-13-dotfiles/</link>
      <pubDate>Sat, 13 Jul 2019 19:07:40 +0000</pubDate>
      
      <guid>https://samirettali.com/posts/2019-07-13-dotfiles/</guid>
      <description>

&lt;p&gt;Dopo anni di utilizzo di GNU/Linux e sistemi Unix-like mi sono deciso a trovare
un sistema efficiente per mantenere i miei dotfiles aggiornati su tutte le
macchine che uso.&lt;/p&gt;

&lt;p&gt;Cercando varie soluzioni online ho deciso di utilizzare un &lt;strong&gt;bare git
repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un repository git classico, creato con il comando &lt;code&gt;git init &amp;lt;directory&amp;gt;&lt;/code&gt;, crea
la cartella indicata con il parametro &lt;code&gt;directory&lt;/code&gt;, chiamata &lt;strong&gt;working tree&lt;/strong&gt;,
all&amp;rsquo;interno della quale potremo scrivere i nostri file.  All&amp;rsquo;interno del working
tree viene creata la cartella &lt;code&gt;.git&lt;/code&gt; che conterrà tutti i dati relativi al
repository, ad esempio i branch, le configurazioni e i commit.&lt;/p&gt;

&lt;p&gt;Ecco la struttura di un repository appena creato:
&lt;img src=&#34;https://samirettali.com/assets/images/dotfiles/repo.png&#34; alt=&#34;Struttura di un repository&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;cos-è-quindi-un-bare-git-repository&#34;&gt;Cos&amp;rsquo;è quindi un bare git repository?&lt;/h3&gt;

&lt;p&gt;Un bare git repository, a diffenza di uno normale, crea solo la cartella &lt;code&gt;.git&lt;/code&gt;
e ci permette di indicare un working tree arbitrario. Per gestire i nostri
dotfiles, useremo quindi come working tree la cartella home del nostro utente,
dato che tutti i file di configurazione saranno lì.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/dotfiles&#34;&gt;articolo&lt;/a&gt; di Atlassian è tutto
descritto alla perfezione.&lt;/p&gt;

&lt;h3 id=&#34;i-miei-dotfiles&#34;&gt;I miei dotfiles&lt;/h3&gt;

&lt;p&gt;Con il comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ curl -Lks bit.do/samirdotfiles | bash&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;viene eseguito uno script che si occupa di clonare il
&lt;a href=&#34;https://github.com/samirettali/dotfiles&#34;&gt;repository&lt;/a&gt; con i miei dotfiles, fare
il backup di eventuali file esistenti, collocare i miei nelle cartelle
corrette e installare i vari plugin di tmux e zsh.&lt;/p&gt;

&lt;h3 id=&#34;configurazione-e-plugins-zsh&#34;&gt;Configurazione e plugins zsh&lt;/h3&gt;

&lt;p&gt;Utilizzo &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; per gestire
le configurazioni, i plugin e i temi, e i plugin che uso di più sono&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;: permette di cercare nella storia dei
comandi in modo efficiente&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-autosuggestions&lt;/a&gt;:
suggerisce il completamento del comando che stiamo scrivendo con quello più
recente che gli corrisponde.&lt;/p&gt;

&lt;h3 id=&#34;aliases-e-funzioni-di-zsh&#34;&gt;Aliases e funzioni di zsh&lt;/h3&gt;

&lt;p&gt;| Comando | Descrizione |
|-|-|
| tl | mostra una lista delle sessioni di tmux |
| t [session] | se non viene passato il parametro &lt;code&gt;session&lt;/code&gt;, viene eseguito il comando &lt;code&gt;tmux&lt;/code&gt;, altrimenti viene creata una sessione di nome &lt;code&gt;session&lt;/code&gt; o ci si collega se esiste già |&lt;/p&gt;

&lt;p&gt;&lt;code&gt;f &amp;lt;name&amp;gt;&lt;/code&gt;: ricerca ricorsiva con &lt;code&gt;find&lt;/code&gt; di cartelle e file che contengono la
stringa &lt;code&gt;name&lt;/code&gt; nel nome.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vack &amp;lt;string&amp;gt;&lt;/code&gt;: apre con vim tutti i file che contengono la stringa indicata
all&amp;rsquo;interno della cartella corrente e delle sue sotto-cartelle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;up &amp;lt;number&amp;gt;&lt;/code&gt;: torna indietro nella gerarchia delle directory, in questo modo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;up 1&lt;/code&gt; = &lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;up 2&lt;/code&gt; = &lt;code&gt;cd ../..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;up 3&lt;/code&gt; = &lt;code&gt;cd ../../..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tad&lt;/code&gt;: crea una cartella e esegue al suo interno una sessione di tmux. Quando la
sessione di tmux viene chiusa la cartella viene eliminata.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ldf&lt;/code&gt;: sposta il file modificato più recentemente dalla cartella Downloads alla
cartella corrente.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sifr &amp;lt;string1&amp;gt; &amp;lt;string2&amp;gt;&lt;/code&gt;: sostituisce tutte le occorrenze di &lt;code&gt;string1&lt;/code&gt; con
&lt;code&gt;string2&lt;/code&gt; nei file contenuti nella cartella corrente e sutte le sue
sotto-cartelle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;groot&lt;/code&gt;: torna alla root di un repository git.&lt;/p&gt;

&lt;p&gt;Questo è il mio tipico setup con tmux e neovim
&lt;a href=&#34;https://samirettali.com/assets/images/dotfiles/setup.png&#34;&gt;&lt;img src=&#34;https://samirettali.com/assets/images/dotfiles/setup.png&#34; alt=&#34;Setup&#34; /&gt;&lt;/a&gt;
Il pannello a sinistra è &lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34;&gt;NERDTree&lt;/a&gt; e
mostra i file nella directory dove è stato aperto vim.&lt;/p&gt;

&lt;p&gt;Il pannello a sinistra è &lt;a href=&#34;https://github.com/majutsushi/tagbar&#34;&gt;tagbar&lt;/a&gt; e mostra
packages, variabili e funzioni, evidenziando la funzione nella quale si trova il
cursore.
La linea in alto invece mostra i buffer aperti e per spostarmi tra essi uso
&lt;code&gt;ctrl+n&lt;/code&gt; e &lt;code&gt;ctrl+p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ho rimpiazzato la statusline con &lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;lightline&lt;/a&gt;
e mostra, a sinistra, la modalità corrente, e a destra il codice esadecimale del
carattere sotto il cursore, il nome dell&amp;rsquo;eventuale branch corrente e il tipo di
file.&lt;/p&gt;

&lt;p&gt;Il pannello nero in basso è tmux.&lt;/p&gt;

&lt;h3 id=&#34;neovim&#34;&gt;Neovim&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;K&lt;/code&gt;: esegue il comando &lt;code&gt;man&lt;/code&gt; sulla parola sotto il cursore.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gV&lt;/code&gt;: seleziona il testo inserito durante l&amp;rsquo;ultimo utilizzo dell&amp;rsquo;insert mode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\&lt;/code&gt;: scrive il comando &lt;code&gt;:vsplit&lt;/code&gt; lasciando la possibilità di aggiungere il nome
di un file da aprire nel nuovo split.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt;: come il comando precedente, però con uno split orizzontale.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;cp&lt;/code&gt;: copia e incolla il paragrafo corrente, in base alla definizione di
paragrafo di vim.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;ze&lt;/code&gt;: cancella le righe vuote.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;u&lt;/code&gt;: sostituisce la parola sotto il cursore con la sua versione
maiuscola.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;l&lt;/code&gt;: sostituisce la parola sotto il cursore con la sua versione
minuscola.&lt;/p&gt;

&lt;p&gt;Questi due mapping servono a mantenere il testo selezionato dopo averlo
tabulato di una posizione:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;vnoremap &amp;lt; &amp;lt;gv&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;vnoremap &amp;gt; &amp;gt;gv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://samirettali.com/assets/images/dotfiles/tmux.png&#34; alt=&#34;Tmux&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>